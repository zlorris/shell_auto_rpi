// Generated by gencpp from file airsim_car_ros_pkgs/CarCmd.msg
// DO NOT EDIT!


#ifndef AIRSIM_CAR_ROS_PKGS_MESSAGE_CARCMD_H
#define AIRSIM_CAR_ROS_PKGS_MESSAGE_CARCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace airsim_car_ros_pkgs
{
template <class ContainerAllocator>
struct CarCmd_
{
  typedef CarCmd_<ContainerAllocator> Type;

  CarCmd_()
    : throttle(0.0)
    , steering(0.0)
    , brake(0.0)
    , handbrake(false)
    , is_manual_gear(false)
    , manual_gear(0)
    , gear_immediate(false)  {
    }
  CarCmd_(const ContainerAllocator& _alloc)
    : throttle(0.0)
    , steering(0.0)
    , brake(0.0)
    , handbrake(false)
    , is_manual_gear(false)
    , manual_gear(0)
    , gear_immediate(false)  {
  (void)_alloc;
    }



   typedef double _throttle_type;
  _throttle_type throttle;

   typedef double _steering_type;
  _steering_type steering;

   typedef double _brake_type;
  _brake_type brake;

   typedef uint8_t _handbrake_type;
  _handbrake_type handbrake;

   typedef uint8_t _is_manual_gear_type;
  _is_manual_gear_type is_manual_gear;

   typedef int32_t _manual_gear_type;
  _manual_gear_type manual_gear;

   typedef uint8_t _gear_immediate_type;
  _gear_immediate_type gear_immediate;





  typedef boost::shared_ptr< ::airsim_car_ros_pkgs::CarCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::airsim_car_ros_pkgs::CarCmd_<ContainerAllocator> const> ConstPtr;

}; // struct CarCmd_

typedef ::airsim_car_ros_pkgs::CarCmd_<std::allocator<void> > CarCmd;

typedef boost::shared_ptr< ::airsim_car_ros_pkgs::CarCmd > CarCmdPtr;
typedef boost::shared_ptr< ::airsim_car_ros_pkgs::CarCmd const> CarCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::airsim_car_ros_pkgs::CarCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::airsim_car_ros_pkgs::CarCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::airsim_car_ros_pkgs::CarCmd_<ContainerAllocator1> & lhs, const ::airsim_car_ros_pkgs::CarCmd_<ContainerAllocator2> & rhs)
{
  return lhs.throttle == rhs.throttle &&
    lhs.steering == rhs.steering &&
    lhs.brake == rhs.brake &&
    lhs.handbrake == rhs.handbrake &&
    lhs.is_manual_gear == rhs.is_manual_gear &&
    lhs.manual_gear == rhs.manual_gear &&
    lhs.gear_immediate == rhs.gear_immediate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::airsim_car_ros_pkgs::CarCmd_<ContainerAllocator1> & lhs, const ::airsim_car_ros_pkgs::CarCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace airsim_car_ros_pkgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::airsim_car_ros_pkgs::CarCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::airsim_car_ros_pkgs::CarCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::airsim_car_ros_pkgs::CarCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::airsim_car_ros_pkgs::CarCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::airsim_car_ros_pkgs::CarCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::airsim_car_ros_pkgs::CarCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::airsim_car_ros_pkgs::CarCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ba7c9338c4c7891d8ccba23fd757db82";
  }

  static const char* value(const ::airsim_car_ros_pkgs::CarCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xba7c9338c4c7891dULL;
  static const uint64_t static_value2 = 0x8ccba23fd757db82ULL;
};

template<class ContainerAllocator>
struct DataType< ::airsim_car_ros_pkgs::CarCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "airsim_car_ros_pkgs/CarCmd";
  }

  static const char* value(const ::airsim_car_ros_pkgs::CarCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::airsim_car_ros_pkgs::CarCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 throttle\n"
"float64 steering\n"
"float64 brake\n"
"bool handbrake\n"
"bool is_manual_gear\n"
"int32 manual_gear\n"
"bool gear_immediate\n"
"# string vehicle_name\n"
;
  }

  static const char* value(const ::airsim_car_ros_pkgs::CarCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::airsim_car_ros_pkgs::CarCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.throttle);
      stream.next(m.steering);
      stream.next(m.brake);
      stream.next(m.handbrake);
      stream.next(m.is_manual_gear);
      stream.next(m.manual_gear);
      stream.next(m.gear_immediate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CarCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::airsim_car_ros_pkgs::CarCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::airsim_car_ros_pkgs::CarCmd_<ContainerAllocator>& v)
  {
    s << indent << "throttle: ";
    Printer<double>::stream(s, indent + "  ", v.throttle);
    s << indent << "steering: ";
    Printer<double>::stream(s, indent + "  ", v.steering);
    s << indent << "brake: ";
    Printer<double>::stream(s, indent + "  ", v.brake);
    s << indent << "handbrake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.handbrake);
    s << indent << "is_manual_gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_manual_gear);
    s << indent << "manual_gear: ";
    Printer<int32_t>::stream(s, indent + "  ", v.manual_gear);
    s << indent << "gear_immediate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear_immediate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AIRSIM_CAR_ROS_PKGS_MESSAGE_CARCMD_H
